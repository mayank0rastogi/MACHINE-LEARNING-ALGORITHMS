# -*- coding: utf-8 -*-
"""Hyperparameter Optimization for Xgboost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LsiRlLjiRue_JGH2rQcqX9ZoG2b7PKfH
"""

import pandas as pd
data=pd.read_csv('churn_modelling.csv')
data.head()

import seaborn as sns
import matplotlib.pyplot as plt
corrmat=data.corr()
top_corr_features=corrmat.index
plt.figure(figsize=(12,8))
#plot heat map
g=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap="RdYlGn")

#Get the Independent and Dependent Features
X=data.iloc[:,3:13]
Y=data.iloc[:,13]

X.head()

Y.head()

"""**As a Part Of Feature Engineering we can convert our categorical variable**"""

geography=pd.get_dummies(X['Geography'],drop_first=True)

geography.head()

gender=pd.get_dummies(X['Gender'],drop_first=True)

gender.head()

#drop categorical features
X=X.drop(['Geography','Gender'],axis=1)

#now conactenate new dummies variable i.e, numerica variable
X=pd.concat([X,geography,gender],axis=1)

X.head()

## Hyper Parameter Optimization
##below range of 0.05 in learning rate may leads to bring the overfitting condition 

params={
 "learning_rate"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,
 "max_depth"        : [ 3, 4, 5, 6, 8, 10, 12, 15],
 "min_child_weight" : [ 1, 3, 5, 7 ],
 "gamma"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],
 "colsample_bytree" : [ 0.3, 0.4, 0.5 , 0.7 ]
    
}

## Hyperparameter optimization using RandomizedSearchCV
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV
import xgboost

def timer(start_time=None):
    if not start_time:
        start_time = datetime.now()
        return start_time
    elif start_time:
        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)
        tmin, tsec = divmod(temp_sec, 60)
        print('\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))

classifier=xgboost.XGBClassifier()

random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)

from datetime import datetime

start_time = timer(None) # timing starts from this point for "start_time" variable
random_search.fit(X,Y)
timer(start_time) # timing ends here for "start_time" variable

X.head()

random_search.best_estimator_

random_search.best_params_

classifier=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
              colsample_bynode=1, colsample_bytree=0.7, gamma=0.0,
              learning_rate=0.1, max_delta_step=0, max_depth=4,
              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,
              nthread=None, objective='binary:logistic', random_state=0,
              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
              silent=None, subsample=1, verbosity=1)

from sklearn.model_selection import cross_val_score
score=cross_val_score(classifier,X,Y,cv=10)

score

score.mean()

